Source: https://developer.apple.com/documentation/metal/mtlcommandbuffer?language=objc
Protocol
MTLCommandBuffer
A container that stores a sequence of GPU commands that you encode into it.
@protocol MTLCommandBuffer
Overview
A command buffer represents a chunk of work for the GPU that stores the commands you encode to it, as well as any resources those commands need. You primarily use a command buffer to:
Create command encoders and call their methods to add commands to the buffer
Optionally reserve a place for the command buffer in its command queue by enqueuing the command buffer, even before you encode any commands into it
Submit, or commit, the contents of the command buffer to the command queue that creates it to run on the GPU device the queue represents
Create a command encoder from an MTLCommandQueue instance by calling its commandBuffer method. Typically, you create one or more command queues when your app launches and then keep them throughout your app’s lifetime.
To add commands to an MTLCommandBuffer instance, create an encoder from one of its factory methods, including:
An MTLRenderCommandEncoder instance by calling renderCommandEncoderWithDescriptor:
An MTLComputeCommandEncoder instance by calling computeCommandEncoderWithDispatchType:
An MTLBlitCommandEncoder instance by calling blitCommandEncoder or blitCommandEncoderWithDescriptor:
An MTLParallelRenderCommandEncoder instance by calling parallelRenderCommandEncoderWithDescriptor:
Note
All encoders inherit additional methods from the MTLCommandEncoder.
You can use only a single encoder at a time to add commands to a command buffer. To start using a different command encoder, first signal that you’re done with the current encoder by calling its endEncoding method. Then create another command encoder from the command buffer and continue adding commands to the buffer with the new encoder.
Repeat the process until you finish encoding commands to the command buffer and are ready to run the buffer’s contents on the GPU. Then submit the command buffer to the command queue that you used to create it by calling the command buffer’s commit method. After an app commits a command buffer, you check its status property or block a thread by calling its waitUntilScheduled or waitUntilCompleted methods.
You also have the option to reserve a place for the command buffer in its command queue by calling the command buffer’s enqueue method. You can call this method exactly once at any time before you commit the buffer to the queue. If you don’t enqueue a command buffer, it implicitly enqueues itself when you commit it. Each command queue ensures the order that you enqueue its command buffers is the same order the queue schedules them to run on the GPU.
Tip
Establish an order of execution for multiple command buffers you encode in parallel by first calling their enqueue methods in that order.
For example, a multithreaded app might set the GPU’s execution order for a sequence of related subtasks by:
Creating a command buffer for each subtask
Enqueuing the command buffers in the proper order on a single thread
Encoding commands to each buffer on a separate thread and then committing it
Topics
Creating Command Encoders
Create a command encoder from a command buffer that encodes a series of GPU commands to it.
Command Encoder Factory Methods
A command encoder defines the actions of a single pass, such as GPU commands that draw, compute, or quickly copy resource data.
Attaching Residency Sets
- useResidencySet:
Attaches a residency set to the command buffer.
Required
- useResidencySets:count:
Attaches multiple residency sets to the command buffer.
Required
Synchronizing Passes with Events
Instruct the GPU to wait for an event between two passes until a different command queue’s command buffer signals the event.
- encodeWaitForEvent:value:
Encodes a command into the command buffer that pauses the GPU from running the buffer’s subsequent passes until the event equals or exceeds a value.
Required
- encodeSignalEvent:value:
Encodes a command into the command buffer that updates an event’s value, which can clear the GPU to run other command encoders waiting for it.
Required
Presenting a Drawable
Instruct the command buffer to call a drawable’s presentation method for you at the best time with convenience methods.
- presentDrawable:
Presents a drawable as early as possible.
Required
- presentDrawable:atTime:
Presents a drawable at a specific time.
Required
- presentDrawable:afterMinimumDuration:
Presents a drawable after the system presents the previous drawable for an amount of time.
Required
Registering State Change Handlers
Notify your app before and after a command buffer runs on the GPU.
- addScheduledHandler:
Registers a completion handler the GPU device calls immediately after it schedules the command buffer to run on the GPU.
Required
- addCompletedHandler:
Registers a completion handler the GPU device calls immediately after the GPU finishes running the commands in the command buffer.
Required
MTLCommandBufferHandler
A completion handler signature a GPU device calls when it finishes scheduling a command buffer, or when the GPU finishes running it.
Submitting a Command Buffer
Send a command buffer to run on the GPU, or reserve a place in the queue to arrange its relative order with other command buffers.
- enqueue
Reserves the next available place for the command buffer in its command queue.
Required
- commit
Submits the command buffer to run on the GPU.
Required
Waiting for State Changes
Pause your app’s execution on the CPU until the command buffer changes its state.
- waitUntilScheduled
Blocks the current thread until the command queue schedules the buffer.
Required
- waitUntilCompleted
Blocks the current thread until the GPU finishes executing the command buffer and all of its completion handlers.
Required
Troubleshooting a Command Buffer
status
The command buffer’s current state.
Required
MTLCommandBufferStatus
The discrete states for a command buffer that represent its life cycle stages.
Command Buffer Debugging
Properties and methods for programmatically debugging runtime issues with a command buffer.
Relationships
Inherits From
NSObject
Conforming Types
MPSCommandBuffer
Current page is MTLCommandBuffer