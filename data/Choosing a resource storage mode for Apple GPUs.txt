Source: https://developer.apple.com/documentation/metal/choosing-a-resource-storage-mode-for-apple-gpus?language=objc
Choosing a Resource Storage Mode for Apple GPUs
Select an appropriate storage mode for your textures and buffers on Apple GPUs.
Overview
Apple GPUs have a unified memory model in which the CPU and the GPU share system memory. However, CPU and GPU access to that memory depends on the storage mode you choose for your resources. The MTLStorageModeShared mode defines system memory that both the CPU and the GPU can access. The MTLStorageModePrivate mode defines system memory that only the GPU can access.
The MTLStorageModeMemoryless mode defines tile memory within the GPU that only the GPU can access. Tile memory has higher bandwidth, lower latency, and consumes less power than system memory.
A diagram that shows the three types of Apple GPU resource storage modes: shared at the top, private in the middle, and memoryless at the bottom. The shared mode resource is in between a GPU and CPU with bidirectional arrows pointing to and from each. The private mode resource is next to a GPU with a bidirectional arrow between them. The memoryless mode resource appears inside a GPU’s tiled memory region.
Choose a Resource Storage Mode for Buffers or Textures
The storage mode you choose depends on how you plan to use Metal resources:
Populate and update on the CPU
Data shared by the CPU and GPU. Use MTLStorageModeShared. The CPU and GPU share data. This is the default for buffer and texture storage.
Access exclusively on the GPU
Data owned by the GPU. Use MTLStorageModePrivate. Choose the mode if you populate your resource with the GPU through a compute, render, or blit pass. This case is common for render targets, intermediary resources, or texture streaming. For guidance on how to copy data to a private resource, see Copying Data to a Private Resource.
Populate on CPU and access frequently on GPU
Shared integrated memory for the CPU and GPU. Use MTLStorageModeShared.
Temporary texture contents for GPU passes
Memory held by the GPU for textures within or between passes. Use MTLStorageModeMemoryless. Memoryless mode only works for textures, and stores temporary resources in tiled memory for high performance. An example is a depth or stencil texture thatʼs used only within a single pass and isnʼt needed in an earlier or later rendering stage.
For information on setting storage modes in your app, see Setting Resource Storage Modes.
Create a Memoryless Render Target
To create a memoryless render target, set the storageMode property of an MTLTextureDescriptor to MTLStorageModeMemoryless and use this descriptor to create a new MTLTexture. Then set this new texture as the texture property of an MTLRenderPassAttachmentDescriptor.
MTLTextureDescriptor *memorylessDescriptor = [MTLTextureDescriptor texture2DDescriptorWithPixelFormat:MTLPixelFormatR16Float
                                                                                                width:256
                                                                                               height:256
                                                                                            mipmapped:YES];
memorylessDescriptor.storageMode = MTLStorageModeMemoryless;
id <MTLTexture> memorylessTexture = [_device newTextureWithDescriptor:memorylessDescriptor];
    
MTLRenderPassDescriptor *renderPassDescriptor = [MTLRenderPassDescriptor renderPassDescriptor];
renderPassDescriptor.depthAttachment.texture = memorylessTexture;
See Rendering a Scene with Deferred Lighting in Objective-C for an example of an app that uses a memoryless render target.
Note
You can create only textures, not buffers, using MTLStorageModeMemoryless mode. You can’t use buffers as memoryless render targets.
Current page is Choosing a Resource Storage Mode for Apple GPUs