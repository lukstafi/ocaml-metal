Source: https://developer.apple.com/documentation/metal/mtlcomputepipelinestate?language=objc
Protocol
MTLComputePipelineState
An interface that represents a GPU pipeline configuration for running kernels in a compute pass.
@protocol MTLComputePipelineState
Overview
The MTLComputePipelineState protocol is an interface that represents a specific configuration for the GPU pipeline for a compute pass. Use a pipeline state instance to configure a compute pass by calling the setComputePipelineState: method of an MTLComputeCommandEncoder instance.
To create a pipeline state, call the appropriate MTLDevice method (see Pipeline State Creation). You typically make pipeline state instances at a noncritical time, like when your app first launches. This is because graphics drivers may need time to evaluate and build each pipeline state. However, you can quickly use and reuse each pipeline state throughout your appâ€™s lifetime.
Topics
Identifying a Pipeline State
device
The device instance that created the pipeline state.
Required
gpuResourceID
An unique identifier that represents the pipeline state, which you can add to an argument buffer.
Required
label
A string that helps you identify the compute pipeline state during debugging.
Required
Checking Threadgroup Attributes
maxTotalThreadsPerThreadgroup
The maximum number of threads in a threadgroup that you can dispatch to the pipeline.
Required
threadExecutionWidth
The number of threads that the GPU executes simultaneously.
Required
staticThreadgroupMemoryLength
The length, in bytes, of statically allocated threadgroup memory.
Required
Checking Imageblock Attributes
- imageblockMemoryLengthForDimensions:
Returns the length of reserved memory for an imageblock of a given size.
Required
Checking Indirect Command Buffer Support
supportIndirectCommandBuffers
A Boolean value that indicates whether the compute pipeline supports indirect command buffers.
Required
Checking Shader Validation
shaderValidation
The current state of shader validation for the pipeline.
Required
Creating Function Handles
- functionHandleWithFunction:
Creates a function handle for a visible function.
Required
Adding Visible Functions
- newComputePipelineStateWithAdditionalBinaryFunctions:error:
Creates a new pipeline state object with additional callable functions.
Required
Creating Function Tables
- newVisibleFunctionTableWithDescriptor:
Creates a new visible function table.
Required
- newIntersectionFunctionTableWithDescriptor:
Creates a new intersection function table.
Required
Relationships
Inherits From
NSObject
Current page is MTLComputePipelineState