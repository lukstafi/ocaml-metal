Source: https://developer.apple.com/documentation/metal/mtlblitcommandencoder?language=objc
Protocol
MTLBlitCommandEncoder
An interface you can use to encode GPU commands that copy and modify the underlying memory of various Metal resources.
@protocol MTLBlitCommandEncoder
Overview
Each GPU driver implements the MTLBlitCommandEncoder protocol, an interface you use to encode various commands that copy or manipulate resource data, which include the following:
Filling buffers with repeating bytes
Generating mipmaps for textures
Copying data between buffers
Copying data between textures
Copying data between a texture and a buffer
Managing the contents of indirect command buffers
Synchronizing buffers, textures, and other resources between the CPU and GPU
Improving runtime performance for resources by optimizing their memory layout for the GPU or CPU
Apps typically use these commands to move data between a resource that uses private storage to, or from, another resource that uses CPU-accessible storage. Some apps use them to apply image-processing and texture effects, such as blurring or reflections, or to render and work with offscreen image data.
You can create an MTLBlitCommandEncoder instance by calling one of an MTLCommandBuffer instance’s methods, such as blitCommandEncoder. When you finish encoding blit commands, finalize the blit pass into the command buffer by calling the encoder’s endEncoding method.
Topics
Filling Buffers with Data
Initialize the bytes within a Metal buffer.
- fillBuffer:range:value:
Encodes a command that fills a buffer with a constant value for each byte.
Required
Generating Texture Mipmaps
Initialize a texture’s mipmap levels with the content in its primary layer.
- generateMipmapsForTexture:
Encodes a command that generates mipmaps for a texture from the base mipmap level up to the highest mipmap level.
Required
Copying Buffer Data to Another Buffer
Transfer bytes from one Metal buffer to another, such as from a buffer with private storage to a buffer with shared storage.
- copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:
Encodes a command that copies data from one buffer into another.
Required
Copying Texture Data to Another Texture
Transfer bytes from one Metal texture to another, whether it’s the entire texture or just a portion of it.
- copyFromTexture:toTexture:
Encodes a command that copies data from one texture to another.
Required
- copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:
Encodes a command that copies slices of a texture to another texture’s slices.
Required
- copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
Encodes a command that copies image data from a texture’s slice into another slice.
Required
Copying Buffer Data to a Texture
Transfer bytes from a Metal buffer into a Metal texture.
- copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
Encodes a command to copy image data from a source buffer into a destination texture.
Required
- copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:
Encodes a command to copy image data from a source buffer into a destination texture.
Required
Copying Texture Data to a Buffer
Transfer bytes from a Metal texture into a Metal buffer.
- copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:
Encodes a command that copies image data from a texture slice to a buffer.
Required
- copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:
Encodes a command that copies image data from a texture slice to a buffer, and provides options for special texture formats.
Required
Working with Textures on the GPU
Improve the GPU’s access times to a texture by altering the layout of its underlying memory.
- optimizeContentsForGPUAccess:
Encodes a command that improves the performance of the GPU’s accesses to a texture.
Required
- optimizeContentsForGPUAccess:slice:level:
Encodes a command that improves the performance of the GPU’s accesses to a specific portion of a texture.
Required
Working with Textures on the CPU
Improve the CPU’s access times to a texture by altering the layout of its underlying memory.
- optimizeContentsForCPUAccess:
Encodes a command that improves the performance of the CPU’s accesses to a texture.
Required
- optimizeContentsForCPUAccess:slice:level:
Encodes a command that improves the performance of the CPU’s accesses to a specific portion of a texture.
Required
Working with Managed Resources
Update the CPU’s copy of a resource that uses the managed storage mode, including buffers and textures, to match the GPU’s copy.
- synchronizeResource:
Encodes a command that synchronizes the CPU’s copy of a managed resource, such as a buffer or texture, so that it matches the GPU’s copy.
Required
- synchronizeTexture:slice:level:
Encodes a command that synchronizes a part of the CPU’s copy of a texture so that it matches the GPU’s copy.
Required
Working with Fences
Inform the GPU driver when a blit pass needs to wait for resources to update before proceeding, or when it finishes modifying resources itself.
- waitForFence:
Encodes a command that instructs the GPU to wait until a pass updates a fence.
Required
- updateFence:
Encodes a command that instructs the GPU to update a fence, which signals passes waiting on the fence.
Required
Working with Indirect Command Buffers
Alter the commands within a Metal indirect command buffer.
- copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:
Encodes a command that copies commands from one indirect command buffer into another.
Required
- resetCommandsInBuffer:withRange:
Encodes a command that resets a range of commands in an indirect command buffer.
Required
- optimizeIndirectCommandBuffer:withRange:
Encodes a command that can improve the performance of a range of commands within an indirect command buffer.
Required
Working with Sample Counter Buffers
Save a GPU’s counter data at runtime and then convert it into a usable data structure.
- sampleCountersInBuffer:atSampleIndex:withBarrier:
Encodes a command that samples the GPU’s hardware counters during a blit pass and stores the data in a counter sample buffer.
Required
- resolveCounters:inRange:destinationBuffer:destinationOffset:
Encodes a command that resolves the data from the samples in a sample counter buffer and stores the results into a buffer.
Required
Working with Sparse Texture Access Counters
Retrieve or clear the number of times the GPU accesses specific areas within a sparse texture.
- getTextureAccessCounters:region:mipLevel:slice:resetCounters:countersBuffer:countersBufferOffset:
Encodes a command that retrieves a sparse texture’s access data for a specific region, mipmap level, and slice.
Required
- resetTextureAccessCounters:region:mipLevel:slice:
Encodes a command that resets a sparse texture’s access data for a specific region, mipmap level, and slice.
Required
Relationships
Inherits From
MTLCommandEncoder
Current page is MTLBlitCommandEncoder